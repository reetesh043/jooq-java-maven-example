/*
 * This file is generated by jOOQ.
 */
package com.reet.java.jooq.generated.tables;


import com.reet.java.jooq.generated.Keys;
import com.reet.java.jooq.generated.Public;
import com.reet.java.jooq.generated.tables.records.BankRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bank extends TableImpl<BankRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.BANK</code>
     */
    public static final Bank BANK = new Bank();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankRecord> getRecordType() {
        return BankRecord.class;
    }

    /**
     * The column <code>PUBLIC.BANK.BANK_ID</code>.
     */
    public final TableField<BankRecord, Integer> BANK_ID = createField(DSL.name("BANK_ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.BANK.BANK_NAME</code>.
     */
    public final TableField<BankRecord, String> BANK_NAME = createField(DSL.name("BANK_NAME"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.BANK.ADDRESS</code>.
     */
    public final TableField<BankRecord, String> ADDRESS = createField(DSL.name("ADDRESS"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Bank(Name alias, Table<BankRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bank(Name alias, Table<BankRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.BANK</code> table reference
     */
    public Bank(String alias) {
        this(DSL.name(alias), BANK);
    }

    /**
     * Create an aliased <code>PUBLIC.BANK</code> table reference
     */
    public Bank(Name alias) {
        this(alias, BANK);
    }

    /**
     * Create a <code>PUBLIC.BANK</code> table reference
     */
    public Bank() {
        this(DSL.name("BANK"), null);
    }

    public <O extends Record> Bank(Table<O> child, ForeignKey<O, BankRecord> key) {
        super(child, key, BANK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BankRecord, Integer> getIdentity() {
        return (Identity<BankRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BankRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    @Override
    public Bank as(String alias) {
        return new Bank(DSL.name(alias), this);
    }

    @Override
    public Bank as(Name alias) {
        return new Bank(alias, this);
    }

    @Override
    public Bank as(Table<?> alias) {
        return new Bank(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bank rename(String name) {
        return new Bank(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bank rename(Name name) {
        return new Bank(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bank rename(Table<?> name) {
        return new Bank(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
