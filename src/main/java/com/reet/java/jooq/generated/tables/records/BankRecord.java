/*
 * This file is generated by jOOQ.
 */
package com.reet.java.jooq.generated.tables.records;


import com.reet.java.jooq.generated.tables.Bank;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankRecord extends UpdatableRecordImpl<BankRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>PUBLIC.BANK.BANK_ID</code>.
     */
    public void setBankId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.BANK.BANK_ID</code>.
     */
    public Integer getBankId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PUBLIC.BANK.BANK_NAME</code>.
     */
    public void setBankName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.BANK.BANK_NAME</code>.
     */
    public String getBankName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.BANK.ADDRESS</code>.
     */
    public void setAddress(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.BANK.ADDRESS</code>.
     */
    public String getAddress() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Bank.BANK.BANK_ID;
    }

    @Override
    public Field<String> field2() {
        return Bank.BANK.BANK_NAME;
    }

    @Override
    public Field<String> field3() {
        return Bank.BANK.ADDRESS;
    }

    @Override
    public Integer component1() {
        return getBankId();
    }

    @Override
    public String component2() {
        return getBankName();
    }

    @Override
    public String component3() {
        return getAddress();
    }

    @Override
    public Integer value1() {
        return getBankId();
    }

    @Override
    public String value2() {
        return getBankName();
    }

    @Override
    public String value3() {
        return getAddress();
    }

    @Override
    public BankRecord value1(Integer value) {
        setBankId(value);
        return this;
    }

    @Override
    public BankRecord value2(String value) {
        setBankName(value);
        return this;
    }

    @Override
    public BankRecord value3(String value) {
        setAddress(value);
        return this;
    }

    @Override
    public BankRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BankRecord
     */
    public BankRecord() {
        super(Bank.BANK);
    }

    /**
     * Create a detached, initialised BankRecord
     */
    public BankRecord(Integer bankId, String bankName, String address) {
        super(Bank.BANK);

        setBankId(bankId);
        setBankName(bankName);
        setAddress(address);
        resetChangedOnNotNull();
    }
}
