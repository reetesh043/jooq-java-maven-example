/*
 * This file is generated by jOOQ.
 */
package com.reet.java.jooq.generated.tables;


import com.reet.java.jooq.generated.Keys;
import com.reet.java.jooq.generated.Public;
import com.reet.java.jooq.generated.tables.records.BankaccountRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bankaccount extends TableImpl<BankaccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.BANKACCOUNT</code>
     */
    public static final Bankaccount BANKACCOUNT = new Bankaccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankaccountRecord> getRecordType() {
        return BankaccountRecord.class;
    }

    /**
     * The column <code>PUBLIC.BANKACCOUNT.ACCOUNT_ID</code>.
     */
    public final TableField<BankaccountRecord, Integer> ACCOUNT_ID = createField(DSL.name("ACCOUNT_ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.BANKACCOUNT.BANK_ID</code>.
     */
    public final TableField<BankaccountRecord, Integer> BANK_ID = createField(DSL.name("BANK_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.BANKACCOUNT.ACCOUNT_NUMBER</code>.
     */
    public final TableField<BankaccountRecord, String> ACCOUNT_NUMBER = createField(DSL.name("ACCOUNT_NUMBER"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.BANKACCOUNT.ACCOUNT_TYPE</code>.
     */
    public final TableField<BankaccountRecord, String> ACCOUNT_TYPE = createField(DSL.name("ACCOUNT_TYPE"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.BANKACCOUNT.BALANCE</code>.
     */
    public final TableField<BankaccountRecord, Double> BALANCE = createField(DSL.name("BALANCE"), SQLDataType.DOUBLE.nullable(false), this, "");

    private Bankaccount(Name alias, Table<BankaccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bankaccount(Name alias, Table<BankaccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PUBLIC.BANKACCOUNT</code> table reference
     */
    public Bankaccount(String alias) {
        this(DSL.name(alias), BANKACCOUNT);
    }

    /**
     * Create an aliased <code>PUBLIC.BANKACCOUNT</code> table reference
     */
    public Bankaccount(Name alias) {
        this(alias, BANKACCOUNT);
    }

    /**
     * Create a <code>PUBLIC.BANKACCOUNT</code> table reference
     */
    public Bankaccount() {
        this(DSL.name("BANKACCOUNT"), null);
    }

    public <O extends Record> Bankaccount(Table<O> child, ForeignKey<O, BankaccountRecord> key) {
        super(child, key, BANKACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BankaccountRecord, Integer> getIdentity() {
        return (Identity<BankaccountRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BankaccountRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_E;
    }

    @Override
    public List<ForeignKey<BankaccountRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_EA);
    }

    private transient Bank _bank;

    /**
     * Get the implicit join path to the <code>PUBLIC.BANK</code> table.
     */
    public Bank bank() {
        if (_bank == null)
            _bank = new Bank(this, Keys.CONSTRAINT_EA);

        return _bank;
    }

    @Override
    public Bankaccount as(String alias) {
        return new Bankaccount(DSL.name(alias), this);
    }

    @Override
    public Bankaccount as(Name alias) {
        return new Bankaccount(alias, this);
    }

    @Override
    public Bankaccount as(Table<?> alias) {
        return new Bankaccount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bankaccount rename(String name) {
        return new Bankaccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bankaccount rename(Name name) {
        return new Bankaccount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bankaccount rename(Table<?> name) {
        return new Bankaccount(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super Integer, ? super String, ? super String, ? super Double, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super Integer, ? super String, ? super String, ? super Double, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
