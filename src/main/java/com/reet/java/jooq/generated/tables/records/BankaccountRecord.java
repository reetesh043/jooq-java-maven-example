/*
 * This file is generated by jOOQ.
 */
package com.reet.java.jooq.generated.tables.records;


import com.reet.java.jooq.generated.tables.Bankaccount;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankaccountRecord extends UpdatableRecordImpl<BankaccountRecord> implements Record5<Integer, Integer, String, String, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>PUBLIC.BANKACCOUNT.ACCOUNT_ID</code>.
     */
    public void setAccountId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.BANKACCOUNT.ACCOUNT_ID</code>.
     */
    public Integer getAccountId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PUBLIC.BANKACCOUNT.BANK_ID</code>.
     */
    public void setBankId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.BANKACCOUNT.BANK_ID</code>.
     */
    public Integer getBankId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>PUBLIC.BANKACCOUNT.ACCOUNT_NUMBER</code>.
     */
    public void setAccountNumber(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.BANKACCOUNT.ACCOUNT_NUMBER</code>.
     */
    public String getAccountNumber() {
        return (String) get(2);
    }

    /**
     * Setter for <code>PUBLIC.BANKACCOUNT.ACCOUNT_TYPE</code>.
     */
    public void setAccountType(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.BANKACCOUNT.ACCOUNT_TYPE</code>.
     */
    public String getAccountType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>PUBLIC.BANKACCOUNT.BALANCE</code>.
     */
    public void setBalance(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>PUBLIC.BANKACCOUNT.BALANCE</code>.
     */
    public Double getBalance() {
        return (Double) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, Integer, String, String, Double> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Bankaccount.BANKACCOUNT.ACCOUNT_ID;
    }

    @Override
    public Field<Integer> field2() {
        return Bankaccount.BANKACCOUNT.BANK_ID;
    }

    @Override
    public Field<String> field3() {
        return Bankaccount.BANKACCOUNT.ACCOUNT_NUMBER;
    }

    @Override
    public Field<String> field4() {
        return Bankaccount.BANKACCOUNT.ACCOUNT_TYPE;
    }

    @Override
    public Field<Double> field5() {
        return Bankaccount.BANKACCOUNT.BALANCE;
    }

    @Override
    public Integer component1() {
        return getAccountId();
    }

    @Override
    public Integer component2() {
        return getBankId();
    }

    @Override
    public String component3() {
        return getAccountNumber();
    }

    @Override
    public String component4() {
        return getAccountType();
    }

    @Override
    public Double component5() {
        return getBalance();
    }

    @Override
    public Integer value1() {
        return getAccountId();
    }

    @Override
    public Integer value2() {
        return getBankId();
    }

    @Override
    public String value3() {
        return getAccountNumber();
    }

    @Override
    public String value4() {
        return getAccountType();
    }

    @Override
    public Double value5() {
        return getBalance();
    }

    @Override
    public BankaccountRecord value1(Integer value) {
        setAccountId(value);
        return this;
    }

    @Override
    public BankaccountRecord value2(Integer value) {
        setBankId(value);
        return this;
    }

    @Override
    public BankaccountRecord value3(String value) {
        setAccountNumber(value);
        return this;
    }

    @Override
    public BankaccountRecord value4(String value) {
        setAccountType(value);
        return this;
    }

    @Override
    public BankaccountRecord value5(Double value) {
        setBalance(value);
        return this;
    }

    @Override
    public BankaccountRecord values(Integer value1, Integer value2, String value3, String value4, Double value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BankaccountRecord
     */
    public BankaccountRecord() {
        super(Bankaccount.BANKACCOUNT);
    }

    /**
     * Create a detached, initialised BankaccountRecord
     */
    public BankaccountRecord(Integer accountId, Integer bankId, String accountNumber, String accountType, Double balance) {
        super(Bankaccount.BANKACCOUNT);

        setAccountId(accountId);
        setBankId(bankId);
        setAccountNumber(accountNumber);
        setAccountType(accountType);
        setBalance(balance);
        resetChangedOnNotNull();
    }
}
